#Step 1: Create an IAM user for the Set-up
#=========================================
1. Log in to AWS
2. Create IAM user with a programmatic access
3. Either assign "AdministratorAccess" policy or the minimum specified here- https://eksctl.io/usage/minimum-iam-policies/ to the user
4. If the minimum are to be used, create the 2 "non-AWS-managed" policies and attach all 4 the user
5. Download credentials for the user.

#Step 2: Using the AWS CLI, configure the IAM credentials for eksctl
#===================================================================
1. If you don't already have the AWS CLI installed in your workspace, install it
   https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
2. Run: "aws configure" to configure the IAM credentials
3. Run "aws sts get-caller-identity" to verify the correctness of the profile

#Step 3: Install eksctl
#======================
Follow the guidance here: https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html


#Step 4: Create a cluster using eksctl using one of the 4 options below
#======================================================================
1. You can create using default settings (everything including the node group will be created)
   Run "eksctl create cluster"
   
2. You can create by specifying some particular variables (everything including the node group will be created)
   eksctl create cluster --name=techdomcluster \
                         --region=us-east-1 \
                         --node-type=t2.micro \
                         --nodegroup-name=techdomnodegroup \
                         --nodes=2 \
                         --nodes-min=1 \
                         --nodes-max=3

3. You can create a cluster using a configuration file in the link (https://eksctl.io/usage/schema/)
#This will use your existing VPC and other resources...

--- 
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: existing-vpc
  region: us-east-1
  version: "1.21"
vpc:
  id: vpc-0e88c3c1family123
  subnets:
    private:
      us-east-1a:
        id: subnet-0699d559ea175dad2
      us-east-1b:
        id: subnet-049a9d986dc0dmum1
    public:
      us-east-1a:
        id: subnet-0e4f8a8dda322sis3
      us-east-1b:
        id: subnet-0068c08ea23bebro4
managedNodeGroups:
- name: general
  privateNetworking: true
  instanceType: t2.micro
  desiredCapacity: 1
---



Then, run the command below to create your cluster.
   eksctl create cluster -f <fileName>
   
4. You can create a cluster using a configuration file in the link (https://eksctl.io/usage/schema/)
#This will create VPC and other resources for you...

---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: new-vpc
  region: us-east-1
  version: "1.21"
availabilityZones:
- us-east-1a
- us-east-1b
managedNodeGroups:
- name: general
  privateNetworking: true
  instanceType: t2.micro
  desiredCapacity: 1
- name: spot
  privateNetworking: true
  instanceType: t2.micro
  spot: true
  desiredCapacity: 1
  labels:
    role: spot
  taints:
  - key: spot
    value: "true"
    effect: NoSchedule
---

Then, run the command below to create your cluster.
   eksctl create cluster -f <fileName>

#Step 5: Install kubectl
#=======================
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/


#Step 6: Check to see that everything has been well done
#=======================================================
# To get service, run:
    kubectl get service
     
# To get nodes, run:
    kubectl get nodes
    
# To list EKS clusters
     eksctl get cluster

# To list nodegroups in a cluster, run:
     eksctl get nodegroup --cluster=<clusterName>

# To list nodes in current kubernetes cluster
     kubectl get nodes -o wide

Go to AWS to verify the EKS Cluster, nodegroup, CloudFormation Stack, etc.

#Step 7: If you no longer require the cluster, you may destroy it
#===============================================================
You can delete a cluster, run
      "eksctl delete cluster --name techdomcluster
      
